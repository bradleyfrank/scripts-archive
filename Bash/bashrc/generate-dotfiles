#!/bin/bash

set -eu

OS=""
OUTPUT=""
DATE=$(date +%Y%m%d-%H) # YYYYMMDD-HH

CONF_DIR="$HOME/.config"
PROFILE_TEMPLATE="$(find -L "$CONF_DIR" -name bash_profile.template | head -1)"
RC_TEMPLATE="$(find -L "$CONF_DIR" -name bashrc.template | head -1)"

PROFILE_TEMP="$(mktemp)"
RC_TEMP="$(mktemp)"

PROFILE="$HOME/.bash_profile"
RC="$HOME/.bashrc"


##
## Common functions
##

skip() {
  return 1
}

convert_template() {
  local bash_template="$1" bash_config="$2"

  IFS=''
  while read -r line || [[ -n "$line" ]]; do
    # regex search for '%% <function name>'
    if echo "$line" | grep -qE '^%%'; then
      # get the function name
      func=$(echo "$line" | cut -d ' ' -f 2)

      # set an empty line to 'skip' so the line isn't printed
      if [[ "$func" == "%%" ]]; then func="skip"; fi

      # find the corresponding function to print content
      if eval "$func"; then
        echo -e "$OUTPUT" >> "$bash_config"
      fi
    else
      echo "$line" >> "$bash_config"
    fi
  done < "$bash_template"
}


##
## bash_profile functions
##

# Mac needs to add ~/Library Python 3.7 to PATH
mac_path_anaconda() {
  if [[ "$OS" == "macos" ]] && [[ -d "$HOME/Library/Python/3.7/bin" ]]; then
    OUTPUT="PATH=\"\$HOME/Library/Python/3.7/bin:\$PATH\""
  else
    return 1
  fi
}

# Add GNU packages to Mac's PATH
mac_path_brewgnu() {
  if [[ "$OS" != "macos" ]]; then return 1; fi

  local tmpout binpath

  while read -r formula; do
    binpath=$(printf "PATH=\"%s:\$PATH\"" "$formula")
    tmpout=$(printf '%s%s\\n' "$tmpout" "$binpath")
  done <<< "$(find -L "$(brew --prefix)"/opt -type d -name 'gnubin')"

  # removes last two characters (newline)
  OUTPUT="${tmpout%??}"
}

# Add GNU packages to Mac's MANPATH
mac_manpath_brewgnu() {
  if [[ "$OS" != "macos" ]]; then return 1; fi

  local tmpout manpath

  while read -r formula; do
    manpath=$(printf "MANPATH=\"%s:\$MANPATH\"" "$formula")
    tmpout=$(printf '%s%s\\n' "$tmpout" "$manpath")
  done <<< "$(find -L "$(brew --prefix)"/opt -type d -name 'gnuman')"

  # removes last two characters (newline)
  OUTPUT="${tmpout%??}"
}

# Add Homebrew environment variables
homebrew_shellenv() {
  if [[ "$OS" == "linux" ]] && [[ -x /home/linuxbrew/.linuxbrew/bin/brew ]]; then
    OUTPUT="eval \$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  elif [[ "$OS" == "macos" ]] && [[ -x /usr/local/bin/brew ]]; then
    OUTPUT="eval \$(/usr/local/bin/brew shellenv)"
  else
    return 1
  fi
}

# Source custom Bash scripts
source_profiled() {
  local tmpout

  if [[ -d /usr/local/etc/profile.d ]]; then
    for i in /usr/local/etc/profile.d/*.sh ; do
      if [[ -r "$i" ]]; then
        tmpout=$(printf '. %s\\n%s' "$i" "$tmpout" )
      fi
    done

    # removes last two characters (newline)
    OUTPUT="${tmpout%??}"
  else
    return 1
  fi
}


##
## bashrc functions
##

# Various aliases that replace known/built-in commands
alias_anaconda() {
  if [[ -f /usr/local/anaconda3/bin/activate ]]; then
    OUTPUT="alias ekans='. /usr/local/anaconda3/bin/activate'"
  else
    return 1
  fi
}

alias_ncdu() {
  if type ncdu >/dev/null 2>&1; then
    OUTPUT="alias du='ncdu'"
  else
    return 1
  fi
}

alias_prettyping() {
  if type prettyping >/dev/null 2>&1; then
    OUTPUT="alias ping='prettyping'"
  else
    return 1
  fi
}

alias_pydf() {
  if type pydf >/dev/null 2>&1; then
    OUTPUT="alias df='pydf'"
  else
    return 1
  fi
}

alias_rmate() {
  if type rmate >/dev/null 2>&1; then
    OUTPUT="alias mate='rmate'"
  else
    return 1
  fi
}

# Use keychain if installed with specific per-system options
eval_keychain() {
  if ! type keychain >/dev/null 2>&1; then return 1; fi

  local inherit=""
  local flags="--eval --ignore-missing --quiet"
  local keys="id_esai id_home id_develop id_rsa id_ed25519"

  if [[ "$OS" == "macos" ]]; then
    inherit="--inherit any "
  fi

  OUTPUT="eval \"\$(keychain $flags ${inherit}${keys})\""
}

# Enable MacOS terminal options
export_termopts() {
  if [[ "$OS" != "macos" ]]; then return 1; fi

  OUTPUT=$(printf "export EDITOR=\"/usr/local/bin/mate -w\"\\n")
}

# Find and export Python user site-packages location
export_python_site() {
  local site pyver

  if type python3 >/dev/null 2>&1; then
    pyver="python3"
  else
    pyver="python"
  fi

  site=$("$pyver" -m site | grep -E '^USER_SITE' | awk '{print $2}' | tr -d "'")
  OUTPUT="export USER_SITE=\"$site\""
}


##
## Main Exec
##

# Determine OS
case "$(uname -s)" in
  Darwin) OS="macos" ;;
  Linux) OS="linux" ;;
esac

# Parse templates
convert_template "$PROFILE_TEMPLATE" "$PROFILE_TEMP"
convert_template "$RC_TEMPLATE" "$RC_TEMP"

# Backup existing profile/rc
mv "$PROFILE"{,."$DATE"}
mv "$RC"{,."$DATE"}

# Remove archived profile/rc files older than 2 weeks
find "$HOME" \
  -maxdepth 1 \
  \( -name '.bashrc.*' -o -name '.bash_profile.*' \) \
  -not -newermt "$(date -d "2 weeks ago" "+%F")" \
  -delete

# Move new profiles into place
command cp "$PROFILE_TEMP" "$PROFILE"
command cp "$RC_TEMP" "$RC"
chown "$USER" "$PROFILE" "$RC"
chmod 644 "$PROFILE" "$RC"